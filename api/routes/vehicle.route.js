import express from 'express';
import * as vehicleCtrl from '../controllers/vehicle.controller';
import isAuthenticated from '../middlewares/authenticate';
import validate from '../config/joi.validate';
import schema from '../utils/validator';

const router = express.Router();

/**
 * @swagger
 * tags:
 *   - name: vehicle
 *     description: vehicle operations
 */

/**
 * @swagger
 * definitions:
 *   Vehicle:
 *     type: object
 *     properties:
 *       id:
 *         type: integer
 *         description: Unique identifier representing a specific vehicle
 *         example: 2
 *       code:
 *         type: string
 *         description: code of vehicle
 *         example: BAY884
 *       description:
 *         type: string
 *         description: brief description of vehicle
 *         example: twenty two wheeler truck
 *       status:
 *         type: integer
 *         description: status of the vehicle
 *         example: 1
 *       created_at:
 *         type: string
 *         format: date-time
 *         description: vehicle creation datetime
 *       updated_at:
 *         type: string
 *         format: date-time
 *         description: vehicle update datetime
 *   Error:
 *     type: object
 *     properties:
 *        message:
 *           type: string
 *        error:
 *           type: boolean
 *           default: true
 */

/**
 * @swagger
 * securityDefinitions:
 *   Bearer:
 *     description: |
 *            For accessing the API a valid JWT token must be passed in all the queries in
 *            the 'Authorization' header.
 *
 *
 *            A valid JWT token is generated by the API and returned as answer of a call
 *            to the route /auth/login giving a valid vehicle & password.
 *
 *
 *            The following syntax must be used in the 'Authorization' header:
 *
 *            Bearer xxxxxx.yyyyyyy.zzzzzz
 *     type: apiKey
 *     name: Authorization
 *     in: header
 *
 */

router.route('/')

/**
 * @swagger
 * /vehicle:
 *   post:
 *     tags:
 *       - vehicle
 *     summary: "Create a new vehicle"
 *     security:
 *        - Bearer: []
 *     operationId: addvehicle
 *     consumes:
 *       - application/json
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: body
 *         in: body
 *         description: Created vehicle object
 *         required: true
 *         schema:
 *           $ref: "#/definitions/vehicle"
 *     responses:
 *       200:
 *         description: OK
 *         schema:
 *           $ref: "#/definitions/vehicle"
 *       403:
 *          description: vehicle not found
 *          schema:
 *             $ref: '#/definitions/Error'
 */

    .post((req, res) => {
        vehicleCtrl.add(req, res);
        
    })

    /**
     * @swagger
     * /vehicle:
     *   get:
     *     tags:
     *       - vehicle
     *     summary: "List all vehicles"
     *     operationId: findAll
     *     consumes:
     *       - application/json
     *     produces:
     *       - application/json
     *     parameters: []
     *     responses:
     *       200:
     *         description: OK
     *         schema:
     *            type: object
     */

    .get( (req, res) => {
        vehicleCtrl.findAll(req, res);
    });


router.route('/vehicle:id')

/**
 * @swagger
 * /vehicle/{id}:
 *   get:
 *     tags:
 *       - vehicle
 *     summary: Find the vehicle by ID
 *     operationId: findById
 *     consumes:
 *       - application/json
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: id
 *         in: path
 *         description: id of vehicle that needs to be fetched
 *         required: true
 *         type: integer
 *     responses:
 *       200:
 *         description: OK
 *         schema:
 *           $ref: "#/definitions/vehicle"
 *       404:
 *          description: vehicle not found
 *          schema:
 *             $ref: '#/definitions/Error'
 */

    .get( (req, res) => {
        vehicleCtrl.findById(req, res);
    })

    /**
     * @swagger
     * /vehicle/{id}:
     *   put:
     *     tags:
     *       - vehicle
     *     summary: "Update an existing vehicle by ID"
     *     security:
     *       - Bearer: []
     *     operationId: update
     *     consumes:
     *       - application/json
     *     produces:
     *       - application/json
     *     parameters:
     *       - name: id
     *         in: path
     *         description: id that need to be updated
     *         required: true
     *         type: integer
     *       - name: body
     *         in: body
     *         description: Updated vehicle object
     *         required: true
     *         schema:
     *           $ref: "#/definitions/vehicle"
     *     responses:
     *       200:
     *         description: OK
     *         schema:
     *           $ref: "#/definitions/vehicle"
     *       400:
     *         description: Invalid vehicle
     */

    .put(isAuthenticated, (req, res) => {
        vehicleCtrl.update(req, res);
    })

    /**
     * @swagger
     * /vehicle/{id}:
     *   delete:
     *     tags:
     *       - vehicle
     *     summary: Delete the vehicle by ID
     *     security:
     *       - Bearer: []
     *     operationId: destroy
     *     produces:
     *       - application/json
     *     parameters:
     *       - name: id
     *         in: path
     *         description: id of vehicle that needs to be deleted
     *         required: true
     *         type: integer
     *     responses:
     *       200:
     *         description: OK
     *       400:
     *          description: "Invalid ID"
     */

    .delete(isAuthenticated, (req, res) => {
        vehicleCtrl.destroy(req, res);
    });


export default router;